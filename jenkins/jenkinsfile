pipeline {
    agent {
        label 'cimachine'
    }
    options { 
        buildDiscarder(logRotator(numToKeepStr: '3')) 
    }
    parameters {
        string(name: 'ImageName', defaultValue: 'ecommarce_app')
        string(name: 'ImageTag', defaultValue: 'appv1')
        string(name: 'BranchName', defaultValue: 'main')
    }
    environment { 
        DOCKER_REGISTRY_CREDS =  credentials('docker-registy-creds')
        SONAR_SCANNER_HOME = tool 'sonar-scanner'
    }
    stages{
        stage('App Code Checkout'){
          steps { 
            git url: 'https://github.com/prateekkumawat/jenkins-11am-project.git', branch: "${params.BranchName}"
          }
        }
        
        stage('Sonar Analysis'){
            steps {
                dir('src/'){
                  withSonarQubeEnv('sonar-scanner') {
                    sh ''' $SONAR_SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=docker-python-ecommarce-app \
                    -Dsonar.python.version=3.11 \
                    -Dsonar.projectKey=docker-python-ecommarce-app '''  
                   }   
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                }
            }
        }

        stage("Trivy ScanFS"){
          steps{
            dir('src/'){
                sh "trivy fs . >> /tmp/trivyfs_scan_report.txt"
            }
          }
        }
        
        stage('Build Image') {
            steps {
                sh "docker build -t ${params:ImageName}:${params.ImageTag} ."
            }
        }

        stage('Trivy ImageScan'){
            steps {
                sh "trivy image ${params:ImageName}:${params.ImageTag} >> /tmp/trivy_image_scan_report.txt"
            }
        }
        stage('Push To Registry'){
            steps {
                sh "docker login -u $DOCKER_REGISTRY_CREDS_USR -p $DOCKER_REGISTRY_CREDS_PSW "
                sh "docker tag ${params:ImageName}:${params.ImageTag}  $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag}"
                sh " docker push $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag} "
                sh " docker rm -f ${params:ImageName}:${params.ImageTag} "
                sh "docker rm -f $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag} "
            }
        }
    }
}