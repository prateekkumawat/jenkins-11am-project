pipeline {
    agent {
        label 'devops'
    }
    options { 
        buildDiscarder(logRotator(numToKeepStr: '3')) 
    }
    parameters {
        string(name: 'ImageName', defaultValue: 'jenkinsapp')
        string(name: 'ImageTag', defaultValue: 'latest')
        string(name: 'ContainerPort', defaultValue: '8088')
        string(name: 'ContainerName', defaultValue: 'jenkinsapp')
    }
    environment { 
        DOCKER_REGISTRY_CREDS =  credentials('docker-registy-login')
        SONAR-SCANNER = tool 'sonar-scanner'
    }
    stages{
        stage('App Code Checkout'){
          steps { 
            git url: 'https://github.com/prateekkumawat/jenkins-11am-project.git', branch: 'main'
          }
        }
        
        stage('Sonar Analysis'){
            steps {
                dir('/src'){
                  withSonarQubeEnv('sonar-scanner') {
                    sh ''' $SONAR-SCANNER/bin/sonar-scanner \
                    -Dsonar.projectName=jenkins-docker-pipeline \
                    -Dsonar.python.version=3.11 \
                    -Dsonar.projectKey=jenkins-docker-pipeline '''   
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Build Image') {
            steps {
                sh "docker build -t ${params:ImageName}:${params.ImageTag} ."
            }
        }
        stage('Push To Registry'){
            steps {
                sh "docker login -u $DOCKER_REGISTRY_CREDS_USR -p $DOCKER_REGISTRY_CREDS_PSW "
                sh "docker tag ${params:ImageName}:${params.ImageTag}  $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag}"
                sh " docker push $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag} "
                sh " docker rm -f ${params:ImageName}:${params.ImageTag} "
                sh "docker rm -f $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag} "
            }
        }
        stage('container create'){
            steps{
                sh "docker rm -f ${params.ContainerName}"
                sh "docker run -dit --name ${params.ContainerName} -p ${params.ContainerPort}:80 $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag}"
            }
        }
    }
}